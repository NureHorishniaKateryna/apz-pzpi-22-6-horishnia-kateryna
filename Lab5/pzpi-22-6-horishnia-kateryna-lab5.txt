Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук


Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи №5
з дисципліни «Архітектура програмного забезпечення»
на тему «Розгортання програмної системи та демонстрація її роботи»



Виконала:
ст. гр. ПЗПІ-22-6,
Горішня Катерина Олексіївна


Перевірив:
ст. викладач каф. ПІ,
Сокорчук Ігор Петрович


Харків 2025


1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін
1	24.05.2025	0.1	Створено титульну сторінку та розділ «Опис виконаної роботи»
2	26.05.2025	0.2	Додано Додаток Б, 
розділ «Завдання» та «Висновки»
3	07.06.2025	0.3	Додано посилання на відео та хронологічний опис у Додаток А

		
2 ЗАВДАННЯ
Завдання до лабораторної роботи №5:
1.	Виконати розгортання програмної системи, що складається з серверної частини, веб, мобільного та IoT-клієнтів.
2.	Підготувати мобільний клієнт до локального розгортання на Android-пристрої: зібрати .apk-файл.
3.	Налаштувати взаємодію між усіма частинами системи: забезпечити коректну роботу запитів з клієнта до API; протестувати обмін даними з мобільного клієнта; перевірити авторизацію, захист токенів, обробку помилок.
4.	Провести базове тестування працездатності всіх компонентів системи та зафіксувати результати перевірки.
5.	Записати та опублікувати на YouTube відео з поясненням поясненнями процесу функціонального тестування.
6.	Оформити звіт, що містить повний опис виконаної роботи, результати тестування, висновки та додатки з фрагментами коду.
7.	Завантажити звіт у форматі PDF на платформу dl.nure.ua та додати посилання на відео в коментар до роботи.
	
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
У межах цієї лабораторної роботи було реалізовано повноцінне розгортання програмної системи інтелектуального освітлення, що включає основні компоненти: веб-інтерфейс (frontend), серверну частину (backend) та мобільний застосунок. Розгортання здійснено із застосуванням технологій контейнеризації Docker та Docker Compose, що забезпечує кросплатформну сумісність, масштабованість і зручність у налаштуванні середовища.
Фронтенд-частину системи реалізовано з використанням фреймворку React, який забезпечує високий рівень інтерактивності та продуктивності інтерфейсу. Після збирання веб-клієнт упаковано у Docker-контейнер та розгорнуто на віддаленому сервері. Це дає змогу швидко оновлювати або переносити клієнтську частину без необхідності зміни основної архітектури.
Бекенд-сервер розроблено з використанням фреймворку Flask (Python), що обробляє запити до REST API та виконує основну бізнес-логіку системи. Для зберігання даних використовується база даних PostgreSQL, яка працює як окремий контейнер. Комунікація між сервісами здійснюється через внутрішню Docker-мережу, що гарантує безпеку обміну даними. Всі ключові параметри – порти, URI, токени – зберігаються у файлі .env, який легко адаптувати під будь-яке середовище розгортання.
Всі конфігураційні файли проєкту, зокрема docker-compose.yml, були налаштовані таким чином, щоб одночасно запускати базу даних, серверну частину, веб-клієнт і IoT-клієнт. Кожен компонент визначено як окремий сервіс із власними параметрами середовища. Для кожного з них створено окремий Dockerfile, у якому зазначено базовий образ, команди встановлення залежностей і запуску відповідного застосунку. 
Після запуску було здійснено перевірку контейнерів за допомогою команди docker ps та інтерфейсу Docker Desktop. Було підтверджено, що частина, вебінтерфейс і IoT-клієнт успішно запущені без помилок. Усі необхідні порти відкриті, сервіси коректно взаємодіють у межах спільної мережі. Також сервер перевірено через API-запити, вебклієнт –  через перегляд у браузері, IoT-клієнт – за логами передавання даних.
Розгортання мобільного клієнта здійснювалося на Android-пристрої за допомогою середовища Android Studio. APK-файл було зібрано з використанням того ж API, що й вебклієнт, після чого проведено тестування на фізичному пристрої для підтвердження стабільності й коректної роботи.
У процесі тестування було перевірено повну взаємодію IoT-пристроїв із системою. Спочатку проведено підготовку пристрою – створено новий девайс у системі та отримано унікальний API-ключ. Далі цей ключ було додано до конфігураційного файлу IoT-клієнта. Після цього IoT-застосунок було запущено, і підтверджено його коректну роботу через логування даних. 
Тестування проводилося як через вебінтерфейс, так і через мобільний застосунок, де аналогічно здійснено підключення нового пристрою, додано API-ключ, запущено IoT-клієнт та перевірено його взаємодію з сервером. Таким чином, успішно протестовано обидва способи ініціалізації та підключення пристрою до системи.


4 ВИСНОВКИ
У результаті виконання лабораторної роботи було успішно реалізовано розгортання програмної системи інтелектуального освітлення, що включає всі основні компоненти: веб-інтерфейс, серверну частину, IoT-клієнт і мобільний застосунок. Всі компоненти системи були розгорнуті за допомогою Docker, налаштовані для коректної взаємодії в єдиному середовищі та протестовані на реальних сценаріях роботи.
Розробка та тестування всіх компонентів підтве рдили правильність реалізації архітектурних рішень і забезпечили стабільну взаємодію між модулями. Також було правильно налаштовано середовище, структура Docker-файлів та передача даних між сервісами. Мобільний клієнт успішно пройшов тестування на Android-пристрої, що підтверджує його функціональність та інтеграцію з основним API-сервером.
Отримані результати свідчать про готовність системи до використання, її масштабування, а також можливість подальшого розширення функціоналу.


ДОДАТОК А
ВІДЕОЗАПИС

Відеозапис доповіді на YouTube: https://youtu.be/3iGAOCc3o6s
Хронологічний опис доповіді: 
00:00 – Вступ
00:11 – Опис теми проєкту
00:46 – Опис архітектури IoT-застосунка
01:32 – Підготовка IoT-пристрою: додавання нового девайсу
02:45 – Додавання API-ключа пристрою до конфігурації IoT-застосунка
03:40 – Перевірка запуску IoT-застосунка
03:55 – Тестування роботи IoT через вебклієнт
04:54 – Підготовка IoT-пристрою через мобільний додаток
05:38 – Додавання API-ключа пристрою до конфігурації IoT-застосунка
06:10 – Перевірка запуску IoT-застосунка
06:29 – Тестування роботи IoT через мобільний застосунок
 

ДОДАТОК Б
ПРОГРАМНИЙ КОД

Б.1 Конфігурація Docker Compose
GitHub репозиторій: https://github.com/NureHorishniaKateryna/apz-pzpi-22-6-horishnia-kateryna/blob/main/Lab5/pzpi-22-6-horishnia-kateryna-lab5/docker-compose.yml

 1   version: '3'
 2   
 3   services:
 4     database:
 5       image: postgres:17.2
 6       restart: unless-stopped
 7       volumes: ['db_data:/var/lib/postgresql/data']
 8       environment:
 9         - PGDATA=/var/lib/postgresql/data
10         - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
11         - POSTGRES_DB=lights
12         - POSTGRES_USER=${POSTGRES_USER}
13     hhb:
14       build: .
15       pull_policy: build
16       restart: unless-stopped
17       ports:
18         - '8080:8080'
19       environment:
20         - DATABASE=postgresql+psycopg://${POSTGRES_USER}:
           ${POSTGRES_PASSWORD}@database/lights
21         - JWT_KEY=${JWT_KEY}
22         - MQTT_HOST=${MQTT_HOST}
23         - MQTT_PORT=${MQTT_PORT}
24         - MQTT_USER=${MQTT_USER}
25         - MQTT_PASSWORD=${MQTT_PASSWORD}
26       depends_on:
27         - database
28   
29   volumes:
30     db_data:

